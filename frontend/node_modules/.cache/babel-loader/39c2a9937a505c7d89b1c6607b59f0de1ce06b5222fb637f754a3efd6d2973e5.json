{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zarba\\\\Desktop\\\\cloud_project\\\\frontend\\\\src\\\\TaskForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskForm({\n  onTaskCreated\n}) {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const onSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\"http://localhost:5000/tasks/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          username\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(\"The task has been successfully created!\");\n        onTaskCreated(data); // Передача данных задачи обратно\n        setTitle(\"\");\n        setDescription(\"\");\n        setUsername(\"\");\n      } else {\n        alert(`Error: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Error when creating a task:\", error);\n      alert(\"Failed to create a task.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create a task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      placeholder: \"Task name\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: description,\n      onChange: e => setDescription(e.target.value),\n      placeholder: \"Task Description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: username,\n      onChange: e => setUsername(e.target.value),\n      placeholder: \"\\u0418\\u043C\\u044F \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F (\\u043E\\u043F\\u0446\\u0438\\u043E\\u043D\\u0430\\u043B\\u044C\\u043D\\u043E)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskForm, \"hag7Y0GhDj50IjAVLqEoc0K9K+U=\");\n_c = TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TaskForm","onTaskCreated","_s","title","setTitle","description","setDescription","username","setUsername","onSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","alert","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/zarba/Desktop/cloud_project/frontend/src/TaskForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function TaskForm({ onTaskCreated }) {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/tasks/\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ title, description, username }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                alert(\"The task has been successfully created!\");\r\n                onTaskCreated(data); // Передача данных задачи обратно\r\n                setTitle(\"\");\r\n                setDescription(\"\");\r\n                setUsername(\"\");\r\n            } else {\r\n                alert(`Error: ${data.error}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error when creating a task:\", error);\r\n            alert(\"Failed to create a task.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <h2>Create a task</h2>\r\n            <input\r\n                type=\"text\"\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                placeholder=\"Task name\"\r\n                required\r\n            />\r\n            <textarea\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n                placeholder=\"Task Description\"\r\n            ></textarea>\r\n            <input\r\n                type=\"text\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                placeholder=\"Имя пользователя (опционально)\"\r\n            />\r\n            <button type=\"submit\">Создать задачу</button>\r\n        </form>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}