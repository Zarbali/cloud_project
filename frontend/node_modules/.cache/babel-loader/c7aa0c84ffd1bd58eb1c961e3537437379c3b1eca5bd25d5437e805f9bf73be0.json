{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zarba\\\\Desktop\\\\cloud_project\\\\frontend\\\\src\\\\TaskManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport UserForm from \"./UserForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskManager() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/tasks/\");\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error(\"Ошибка при загрузке задач:\", error);\n    }\n  };\n  const onTaskCreated = task => {\n    setTasks([...tasks, task]);\n  };\n  const onUserCreated = user => {\n    setUsers([...users, user]);\n    alert(`Пользователь ${user.username} успешно создан!`);\n  };\n  const onTaskDeleted = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}`, {\n        method: \"DELETE\"\n      });\n      if (response.ok) {\n        setTasks(tasks.filter(task => task.id !== taskId));\n        alert(\"Задача успешно удалена!\");\n      } else {\n        const data = await response.json();\n        alert(`Ошибка при удалении задачи: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при удалении задачи:\", error);\n      alert(\"Не удалось удалить задачу.\");\n    }\n  };\n  const onTaskUpdated = async (taskId, title, description) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          description\n        })\n      });\n      if (response.ok) {\n        const updatedTask = await response.json();\n        setTasks(tasks.map(task => task.id === taskId ? updatedTask : task));\n        alert(\"Задача успешно обновлена!\");\n      } else {\n        const data = await response.json();\n        alert(`Ошибка при обновлении задачи: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при обновлении задачи:\", error);\n      alert(\"Не удалось обновить задачу.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041C\\u0435\\u043D\\u0435\\u0434\\u0436\\u0435\\u0440 \\u0437\\u0430\\u0434\\u0430\\u0447\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserForm, {\n      onUserCreated: onUserCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onTaskCreated: onTaskCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onTaskDeleted: onTaskDeleted,\n      onTaskUpdated: onTaskUpdated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskManager, \"L91uANW3b3TLl8tCQr6/remZcpY=\");\n_c = TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","TaskList","TaskForm","UserForm","jsxDEV","_jsxDEV","TaskManager","_s","tasks","setTasks","users","setUsers","fetchTasks","response","fetch","data","json","error","console","onTaskCreated","task","onUserCreated","user","alert","username","onTaskDeleted","taskId","method","ok","filter","id","onTaskUpdated","title","description","headers","body","JSON","stringify","updatedTask","map","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/zarba/Desktop/cloud_project/frontend/src/TaskManager.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport TaskList from \"./TaskList\";\r\nimport TaskForm from \"./TaskForm\";\r\nimport UserForm from \"./UserForm\";\r\n\r\nexport default function TaskManager() {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchTasks();\r\n    }, []);\r\n\r\n    const fetchTasks = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/tasks/\");\r\n            const data = await response.json();\r\n            setTasks(data);\r\n        } catch (error) {\r\n            console.error(\"Ошибка при загрузке задач:\", error);\r\n        }\r\n    };\r\n\r\n    const onTaskCreated = (task) => {\r\n        setTasks([...tasks, task]);\r\n    };\r\n\r\n    const onUserCreated = (user) => {\r\n        setUsers([...users, user]);\r\n        alert(`Пользователь ${user.username} успешно создан!`);\r\n    };\r\n\r\n    const onTaskDeleted = async (taskId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/tasks/${taskId}`, {\r\n                method: \"DELETE\",\r\n            });\r\n\r\n            if (response.ok) {\r\n                setTasks(tasks.filter((task) => task.id !== taskId));\r\n                alert(\"Задача успешно удалена!\");\r\n            } else {\r\n                const data = await response.json();\r\n                alert(`Ошибка при удалении задачи: ${data.error}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Ошибка при удалении задачи:\", error);\r\n            alert(\"Не удалось удалить задачу.\");\r\n        }\r\n    };\r\n\r\n    const onTaskUpdated = async (taskId, title, description) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/tasks/${taskId}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ title, description }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const updatedTask = await response.json();\r\n                setTasks(tasks.map((task) => (task.id === taskId ? updatedTask : task)));\r\n                alert(\"Задача успешно обновлена!\");\r\n            } else {\r\n                const data = await response.json();\r\n                alert(`Ошибка при обновлении задачи: ${data.error}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Ошибка при обновлении задачи:\", error);\r\n            alert(\"Не удалось обновить задачу.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Менеджер задач</h1>\r\n            <UserForm onUserCreated={onUserCreated} />\r\n            <TaskForm onTaskCreated={onTaskCreated} />\r\n            <TaskList tasks={tasks} onTaskDeleted={onTaskDeleted} onTaskUpdated={onTaskUpdated} />\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}